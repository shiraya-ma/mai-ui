'use strict';
import { resolve } from 'path';
import { existsSync, readFileSync, writeFileSync } from 'fs';
import packageJson from '../package.json';

const UNKNOWN = 'unknown';

const rootdir = resolve(__dirname, '..');
const nodeModulesDir = resolve(rootdir, 'node_modules');

const dependencies: Deps.Modules = packageJson.dependencies || {};
const peerDependencies: Deps.Modules = packageJson.peerDependencies || {};

const resultRows: string[] = [
  '# LICENSES',
  '',
  'This file is auto-generated by `bun ./.bun/license-checkerts`.',
  '',
  '## Index', '',
  '- [Dependencies](#dependencies)',
  ...(Object.keys(dependencies).map(genIndex) || []),
  '- [peerDependencies](#peerdependencies)',
  ...(Object.keys(peerDependencies).map(genIndex) || []),
  ''
];

const hoge = Object.keys(dependencies).map(genIndex)

resultRows.push('## Dependencies', '');
Object.keys(dependencies)
  .map(getDependenciesData)
  .forEach(processDependencies(resultRows));

resultRows.push('## peerDependencies', '');
Object.keys(peerDependencies)
  .map(getDependenciesData)
  .forEach(processDependencies(resultRows));

const outfile = resolve(rootdir, 'LICENSES.md');

const result = resultRows.join('\n');

writeFileSync(outfile, result, 'utf8');

function genIndex (name: string): string {
  const link = name
    .toLowerCase()
    .replace(/(\s)/g, '-')
    .replace(/(@|\/)/g, '');

  return `  - [${name}](#user-content-${encodeURIComponent(link)})`;
};

function getDependenciesData (name: string): Deps.Data {
  const moduleDir = resolve(nodeModulesDir, name);
  const packageJsonPath = resolve(moduleDir, 'package.json');
  const packageData = JSON.parse(readFileSync(packageJsonPath, 'utf8'));
  const licenseFileCandidates = ['LICENSE', 'LICENSE.md', 'LICENSE.txt'];
  const licensePath = licenseFileCandidates
    .map((f) => resolve(moduleDir, f))
    .find((p) => existsSync(p));

  const version = packageData.version || UNKNOWN;

  const licenseType = packageData.license || packageData.licenses?.[0]?.type || UNKNOWN;

  const licenseContent = licensePath && existsSync(licensePath)
    ? readFileSync(licensePath, 'utf8')
    : undefined;

  const data: Deps.Data = {
    name,
    version,
    licenseType,
    licenseContent,
  };

  return data;
};

function processDependencies (resultRows: string[]) {
  return (deps: Deps.Modules) => {
    const {
      name,
      version,
      licenseType,
      licenseContent,
    } = deps;

    resultRows.push(`### ${name}`, '');

    const versionBadge = version === UNKNOWN
      ? `<img src="https://img.shields.io/badge/version-unknown-lightgrey" alt="version unknown">`
      : `<img src="https://img.shields.io/badge/version-${version}-blue" alt="version ${version}">`;

    const licenseBadge = licenseType === UNKNOWN
      ? `<img src="https://img.shields.io/badge/license-unknown-lightgrey" alt="license unknown">`
      : `<img src="https://img.shields.io/badge/license-${fixLicenseTypeForURL(licenseType)}-blue" alt="license ${licenseType}">`;

    resultRows.push(`<div>${versionBadge} ${licenseBadge}</div>`, '');
    

    if (licenseContent) {
      resultRows.push('#### License Content', '', '```', licenseContent, '```', '');
    }
  };
};

function fixLicenseTypeForURL (licenseType: string): string {
  return licenseType
    .replace(/\s/g, '&space;')
    .replace(/_/g, '&underscore;')
    .replace(/-/g, '&hyphen;')
    .replace(/&space;/g, '_')
    .replace(/&underscore;/g, '__')
    .replace(/&hyphen;/g, '--');
};

namespace Deps {
  export type Modules = Record<string, string>;

  export type Data = {
    name: DataName;
    version: DataVersion;
    licenseType: DataLicenseType;
    licenseContent?: DataLicenseContent;
  };

  export type DataName = Brand<string, 'Deps.DataName'>;
  export type DataVersion = Brand<string, 'Deps.DataVersion'>;
  export type DataLicenseType = Brand<string, 'Deps.DataLicenseType'>;
  export type DataLicenseContent = Brand<string, 'Deps.DataLicenseContent'>;
};

type Brand<K, T> = K & { __brand: T };
